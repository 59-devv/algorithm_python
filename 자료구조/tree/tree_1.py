"""
Tree 구조
* 트리: Node와 Branch를 이용해서, 사이클을 이루지 않도록 구성한 데이터 구조
* 트리 중 이진트리(Binary Tree) 형태의 구조로, 검색 알고리즘 구현을 위해 사용

알아둘 용어
* Node: 트리에서 데이터를 저장하는 기본 요소 (데이터와 연결된 다른 노드에 대한 Branch정보 포함)
* Root Node: 트리의 가장 상위에 있는 노드
* Level: 최상위 노드를 Level0으로 가정했을 때, 하위 Branch로 연결된 노드의 깊이
* Parent Node: 어떤 노드의 상위에 연결된 노드
* Child Node: 어떤 노드의 하위 레벨에 연결된 노드
* Leaf Node(Terminal Node): Child Node가 하나도 없는 노드
* Siblings(Brother Node): 동일한 Parent Node를 가진 노드들
* Depth: 트리에서 Node가 가질 수 있는 최대 Level

이진트리와 이진탐색트리
* 이진트리: 노드의 최대 Branch가 2인 트리
* 이진탐색트리 (Binary Search Tree: BST): 이진 트리에 추가 조건이 있는 트리
    : 왼쪽 노드는 해당 노드보다 작은 값, 오른쪽 노드는 해당 노드보다 큰 값을 가지고 있어야 함

이진탐색트리의 장점과 주요 용도
* 주요 용도: 데이터 검색(탐색)
* 장점: 탐색 속도를 개선할 수 있음
* 단점: 구현이 복잡하다.

이진탐색트리에서 데이터 삭제
* leaf node 삭제: 데이터 삭제 후, parent의 branch를 None으로
* child node가 1개 있을 때: 삭제 후, child node를 parent node로 연결
* child node가 2개 있을 때: 아래 순서대로
    (1) 삭제할 Node의 오른쪽 자식 선택
    (2) 오른쪽 자식의 가장 하단, 왼쪽에 있는 node를 본인의 자리에 둔다.(가장 작은 node)
    (3) 자리를 바꾸면서, 삭제할 node와 연결된 좌측, 우측 branch도 바꿔준다.
    (3) 만약 가장 작았던 Node가 오른쪽에 값을 가지고 있었다면, 그 parent node의 좌측 branch로 연결시켜준다.

이진탐색트리의 시간복잡도와 단점
* 시간복잡도(탐색시)
    * depth(트리의 높이)를 h라고 표시한다면, O(h)
    * n개의 노드를 가진다면 h= logN에 가까우므로, 시간복잡도는 O(logN)
        * 빅오에서 logN에서의 log는 10이 아니라 2이다.
        * 한번 실행 시마다 50%의 값을 제거한다는 의미
        * 즉 단계가 증사할때마다 50%씩 감소

* 최악의 경우(계속해서 우측으로 뻗어나갈 때),
    링크드리스트와 동일한 상태가 되므로 O(n)이 됨


"""